pipeline {
    agent any

    environment {
        REGISTRY="imagerepo.gems.gov.bd"
        DEPLOYMENT_ENV="prod"
        IMAGE_CREATED_BY="jenkins"
        PROJECT_NAME="web-recruitment"
        K8S_NAMESPACE="iifc-recruit-stage"

        GIT_TAG=sh(returnStdout: true, script: '''
            echo $(git describe --tags)
        ''').trim()

        //Host specific configuration
        HOST_VOLUME_LOCATION="$JENKINS_DATA_LOCATION"


        PROJECT_LOCATION="$HOST_VOLUME_LOCATION/workspace/$JOB_NAME"
        IMAGE_VERSION="$BUILD_NUMBER-$IMAGE_CREATED_BY-$GIT_TAG-$DEPLOYMENT_ENV"
        PROJECT="prod"
        IMAGE_REPOSITORY_NAME="$REGISTRY/$PROJECT/$PROJECT_NAME"
        DOCKER_TAG="$IMAGE_REPOSITORY_NAME:$IMAGE_VERSION"
        DEPLOYMENT_DIRECTORY="./k8s_deploy/prod"
        K8S_SERVICE_NAME="$PROJECT_NAME"
        K8S_CHANGE_CAUSE="$IMAGE_VERSION"
//        K8S_SECRET_NAME="cao-portal-secret"


        //Port configuration
        K8S_SERVICE_PORT="80"
        K8S_CONTAINER_PORT="3000"
        K8S_PORT_NAME="http"

        K8S_NODE_PORT="31910"
                

        //Health check uri
        K8S_STATUS_URI="/index.html"

        //Application configurations and credential

        dockerImage = ''
        dockerRegistryCredential='imagerepo.gems.gov.bd'
        DOCKER_REGISTRY_URL="https://$REGISTRY"


       INSIGHT_HOSTNAME="prod-cao.gov.bd"
                
    }
post {
    always {
            echo 'Sending Discord Notification.'

            discordSend(
                description: "**${K8S_SERVICE_NAME}-${DEPLOYMENT_ENV}**",
               scmWebUrl: 'https://github.com/IIFC-Recruitment/recruitment-web.git',
                showChangeset: true,
                footer: "Status:  ${currentBuild.currentResult}, build ${env.BUILD_NUMBER} Job ${env.JOB_NAME}\nMore info at: ${env.BUILD_URL}",
                webhookURL: 'https://discord.com/api/webhooks/1419622507308388432/lhwPqah_L0eawHzwU58QMEbCdO6NYBOk1jIgbIb8GuVpI_BOt57YmRdOpTci04Riamif',
             )
    } 
}

    stages {
        stage('Init') {
            steps {
                sh '''
                COMMIT_ID=$(git log -1|head -1|awk -F ' ' ' {print $NF}')
                echo "........result of commit .... $COMMIT_ID"
                '''
            }
        }

        // stage('Check for tag') {
        //     steps {
        //         sh '''
        //         if [ -z "$GIT_TAG" ] #empty check
        //          then
        //             echo ERROR: Tag not found
        //             exit 1 # terminate and indicate error
        //         fi
        //         echo "git checking out to $GIT_TAG tag"
        //         git checkout $GIT_TAG
        //         '''
        //     }
        // }


        stage('Test') {
            steps {
                sh '''
                echo "--USER->>$(id -u -n) _uid=$(id -u)<<----->$K8S_NODE_PORT jnkins location ==> $JENKINS_DATA_LOCATION job name $JOB_NAME tag name $GIT_TAG"
                '''
            }
        }

        stage('Creating production building and Docker image') {
            steps {
                script {
                    dockerImage = docker.build("$DOCKER_TAG", "-f ./k8s_deploy/prod/k8s.Dockerfile .")
                }
                sh '''
                docker images|grep $PROJECT_NAME
                '''
            }
        }



        stage('Push docker image') {
            steps{
                script {
                    docker.withRegistry( "$DOCKER_REGISTRY_URL", dockerRegistryCredential ) {
                        dockerImage.push()
                        sh "docker images | grep $IMAGE_REPOSITORY_NAME"
                    }

                }
            }
        }


        stage('Clear image from local after push to Registry') {
            steps {
                echo "Cleaning local docker registry $IMAGE_REPOSITORY_NAME"
                sh '''
                docker rmi $(docker images | grep $IMAGE_REPOSITORY_NAME | awk -F' ' '{print $3}')
                '''
            }
        }

        stage('Deploy Pod') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/k8s_deploy.yaml | xargs -I{} echo {}
                envsubst < $DEPLOYMENT_DIRECTORY/k8s_deploy.yaml | kubectl apply -f -
                kubectl rollout status -n $K8S_NAMESPACE deployment $PROJECT_NAME --timeout 180s
                '''
        }
    }
        stage('Deploy Service') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/k8s_service.yaml | xargs -I{} echo {}
                envsubst < $DEPLOYMENT_DIRECTORY/k8s_service.yaml | kubectl apply -f -
                '''
                }
            }
        }
    }
